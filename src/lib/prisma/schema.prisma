// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  status        Status    @default(Disponible)
  contacs       Contact[] @relation("Contact")
  users         Contact[] @relation("User")
  receivers     Chat[]    @relation("Receiver")
  senders       Chat[]    @relation("Sender")
  accounts      Account[]
  sessions      Session[]
}

model Message {
  id   Int      @id @default(autoincrement())
  text String
  date DateTime @default(now())
  chat Chat?    @relation("Message")
}

model Contact {
  User       User   @relation("User", fields: [user_id], references: [id])
  Contact    User   @relation("Contact", fields: [contact_id], references: [id])
  user_id    String
  contact_id String
  name       String

  @@id([user_id, contact_id])
}

model Chat {
  sender_id   String
  receiver_id String
  message_id  Int    @unique

  Receiver User    @relation("Receiver", fields: [receiver_id], references: [id])
  Sender   User    @relation("Sender", fields: [sender_id], references: [id])
  Message  Message @relation("Message", fields: [message_id], references: [id])

  @@id([sender_id, receiver_id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Status {
  Disponible
  Ocupado
  Ausente
  Desconectado
}
